#!/bin/sh -e
##:
#h: Usage: monero-h { -V , -w WALLET , -l , METHOD ARGS... }
#h:
#h: Helper script for operating a monero wallet.
#h:
#h:   net-connect        Connect by SSH to create a node proxy.
#h:   net-node           Print node address.
#h:   cli-recover        Recover wallet from seed (daemon not needed)
#h:   cli-refresh        Synchronize blocks.
#h:   cli-balance        Print balance.
#h:   cli [COMMAND]      Execute cli commands.
#h:   rpc-start  [PORT]       Open wallet in RPC mode.
#h:   rpc-create NAME [PORT]  Create RPC user systemd service.
#h:
#h: You can select and list wallets with -w and -l.
##:
monero_h() {
    local OPTIND optopt cmd

    ## Parse command line arguments.
    while getopts "w:lV" optopt; do
        case $optopt in
            w)  local MONERO_WALLET="${OPTARG}";;
            l)  monero_h_list_wallets     ;;
            V)  monero_h_show_variables   ;;
            \?) return 1;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    if test ! -n "${1}"; then
        return 0
    fi
    
    ## Operations.
    cmd="$1"
    shift
    case "${cmd}" in
        net-ssh)     monero_h_net_ssh      ;;
        net-node)    monero_h_net_node     ;;
        cli-recover) monero_h_cli_recover  ;;
        cli-refresh) monero_h_cli refresh  ;;
        cli-balance) monero_h_cli balance | sed -n '/^Balance/p' ;;
        cli)         monero_h_cli "$@"        ;;
        rpc-start)   monero_h_rpc_start       ;;
        rpc-create)  monero_h_rpc_create "$@" ;;
        *) echo >&2 "error: Invalid argument: ${cmd}"; return 1;;
    esac
}
monero_h_show_variables() {
    cat <<-EOF
	MONERO_WALLET     : ${MONERO_WALLET}
	MONERO_WALLET_DIR : ${MONERO_WALLET_DIR}
	MONERO_NODE       : ${MONERO_NODE}
	MONERO_NODE_PROXY : ${MONERO_NODE_PROXY}
	MONERO_RPC_PORT   : ${MONERO_RPC_PORT}
	EOF
}
monero_h_calc_variables() {
    MONERO_WALLET=wallet1
    MONERO_WALLET_DIR="${HOME}/Blockchain/xmr"
    if test -e "/opt/monero";     then export PATH="/opt/monero:${PATH}"; fi
    if test -e "/opt/monero-gui"; then export PATH="/opt/monero-gui:${PATH}"; fi
    MONERO_NODE="${MONERO_NODE:-node.moneroworld.com:18089}"
    MONERO_NODE_PROXY=""
    if test -n "${MONERO_NODE_TRUSTED}"; then
        MONERO_CLI_ARGS="${MONERO_CLI_ARGS} --trusted-daemon"
    else
        MONERO_CLI_ARGS="${MONERO_CLI_ARGS} --untrusted-daemon"
    fi
    MONERO_RPC_PORT=18081
}
## -------------------------------------------------------------------
monero_h_list_wallets() {
    if test -d "${MONERO_WALLET_DIR}"; then
        find "${MONERO_WALLET_DIR}" -iname '*.wallet' -exec 'basename' '{}' '.wallet' ';'
    fi
}
monero_h_get_wallet() {
    local f="${MONERO_WALLET_DIR}/${MONERO_WALLET}.wallet"
    if test ! -e "${f}"; then
        echo >&2 "error: Wallet '${MONERO_WALLET}' not found."
        return 1
    fi
    echo "${f}"
}
monero_h_cli_recover() {
    mkdir -p "${MONERO_WALLET_DIR}"
    monero-wallet-cli                       \
        --offline                           \
        --generate-new-wallet "${MONERO_WALLET_DIR}/${MONERO_WALLET}.wallet" \
        --restore-from-seed
}
monero_h_cli() {
    local f="$(monero_h_get_wallet)"; test -n "${f}"
    monero-wallet-cli                           \
        ${MONERO_CLI_ARGS}                      \
        --daemon-address "$(monero_h_net_node)" \
        --password ""                           \
        --wallet "${f}" \
        "$@"
}
monero_h_rpc_start() {
    local f="$(monero_h_get_wallet)"; test -n "${f}"
    monero-wallet-rpc                              \
        --daemon-address "$(monero_h_net_node)"    \
        --untrusted-daemon                         \
        --password ""                              \
        --wallet-file   "${f}"                     \
        --rpc-bind-ip   127.0.0.1                  \
        --rpc-bind-port "${1:-${MONERO_RPC_PORT}}" \
        --disable-rpc-login                        \
        "$@"
}
monero_h_rpc_create() {
    local name="$1"
    local port="${2:-${MONERO_RPC_PORT}}"
    local directory="${HOME}/.config/systemd/user"
    if test ! -n "${name}"; then
        echo >&2 "error: Please specify a name."
        return 1
    fi
    local f="$(monero_h_get_wallet)"; test -n "${f}"
    local exec="$(which monero-wallet-rpc)"
    local exec="${exec} --daemon-address $(monero_h_net_node)"
    local exec="${exec} --untrusted-daemon --password \"\""
    local exec="${exec} --wallet-file ${f}"
    local exec="${exec} --rpc-bind-ip 127.0.0.1 --rpc-bind-port ${port}"
    local exec="${exec} --disable-rpc-login"

    echo "Creating ${directory}/${name}.service ..."
    mkdir -p "${directory}"
    cat > "${directory}/${name}.service" <<-EOF
	[Unit]
	Description=Monero RPC - ${name}
	
	[Service]
	ExecStart=${exec}
	
	[Install]
	WantedBy=default.target
	EOF
    
    systemctl --user daemon-reload
    systemctl --user enable  "${name}"
    systemctl --user restart "${name}"
}
## -------------------------------------------------------------------
monero_h_net_node() {
    if test -n "${MONERO_NODE_PROXY}"; then
        echo "127.0.0.1:18089"
    else
        echo "${MONERO_NODE}"
    fi
}
monero_h_net_ssh() {
    ssh -L "127.0.0.1:18089:${MONERO_NODE}" "${MONERO_NODE_PROXY}" '
    while true; do
        clear
        date
        echo "+--------------------------------------+"
        echo "| Monero stagenet in 127.0.0.1:18081   |"
        echo "| Monero testnet  in 127.0.0.1:18082   |"
        echo "+--------------------------------------+"
        sleep 5
    done'
}
## -------------------------------------------------------------------
monero_h_calc_variables
if test @"${SCRNAME:-$(basename "$0")}" = @"monero-h"; then
    case "${1}" in
        ''|-h|--help) sed -n 's/^ *#h: \{0,1\}//p' "$0";;
        *)            monero_h "$@"; exit 0;;
    esac
fi
